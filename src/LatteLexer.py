# Generated from Latte.g4 by ANTLR 4.7
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2.")
        buf.write("\u012e\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\5")
        buf.write("\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13")
        buf.write("\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16")
        buf.write("\3\16\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\21\3\21\3\21\3\21\3\22\3\22\3\23\3\23\3\24\3\24")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\27\3\27\3\30\3\30\3\31\3\31\3\31\3\32\3\32\3\32\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\35\3\35\3\36")
        buf.write("\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#\3#\3#\3$\3$\3%")
        buf.write("\3%\3%\3&\3&\3&\3\'\3\'\3\'\3(\6(\u00e0\n(\r(\16(\u00e1")
        buf.write("\3(\3(\3)\3)\3)\5)\u00e9\n)\3)\7)\u00ec\n)\f)\16)\u00ef")
        buf.write("\13)\3)\3)\3*\3*\3*\3*\3*\3*\7*\u00f9\n*\f*\16*\u00fc")
        buf.write("\13*\3*\3*\3*\3*\3*\3+\3+\5+\u0105\n+\3,\3,\3-\3-\3.\3")
        buf.write(".\3/\6/\u010e\n/\r/\16/\u010f\3\60\3\60\5\60\u0114\n\60")
        buf.write("\3\61\3\61\3\61\7\61\u0119\n\61\f\61\16\61\u011c\13\61")
        buf.write("\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\3\62\7\62")
        buf.write("\u0128\n\62\f\62\16\62\u012b\13\62\3\62\3\62\2\2\63\3")
        buf.write("\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16")
        buf.write("\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61")
        buf.write("\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*")
        buf.write("S+U\2W\2Y\2[\2],_\2a-c.\3\2\n\5\2\13\f\17\17\"\"\4\2\f")
        buf.write("\f\17\17\3\2,,\3\2\61\61\3\2C\\\3\2c|\3\2\62;\4\2$$^^")
        buf.write("\2\u0137\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2")
        buf.write("\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2")
        buf.write("\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2")
        buf.write("\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3")
        buf.write("\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2")
        buf.write("-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3")
        buf.write("\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2")
        buf.write("?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2")
        buf.write("\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2")
        buf.write("\2\2S\3\2\2\2\2]\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\3e\3\2")
        buf.write("\2\2\5k\3\2\2\2\7s\3\2\2\2\tu\3\2\2\2\13w\3\2\2\2\ry\3")
        buf.write("\2\2\2\17{\3\2\2\2\21}\3\2\2\2\23\177\3\2\2\2\25\u0081")
        buf.write("\3\2\2\2\27\u0084\3\2\2\2\31\u0087\3\2\2\2\33\u008e\3")
        buf.write("\2\2\2\35\u0091\3\2\2\2\37\u0096\3\2\2\2!\u009c\3\2\2")
        buf.write("\2#\u00a0\3\2\2\2%\u00a2\3\2\2\2\'\u00a4\3\2\2\2)\u00a6")
        buf.write("\3\2\2\2+\u00ac\3\2\2\2-\u00b1\3\2\2\2/\u00b3\3\2\2\2")
        buf.write("\61\u00b5\3\2\2\2\63\u00b8\3\2\2\2\65\u00bb\3\2\2\2\67")
        buf.write("\u00c0\3\2\2\29\u00c4\3\2\2\2;\u00c6\3\2\2\2=\u00c8\3")
        buf.write("\2\2\2?\u00ca\3\2\2\2A\u00cc\3\2\2\2C\u00ce\3\2\2\2E\u00d0")
        buf.write("\3\2\2\2G\u00d3\3\2\2\2I\u00d5\3\2\2\2K\u00d8\3\2\2\2")
        buf.write("M\u00db\3\2\2\2O\u00df\3\2\2\2Q\u00e8\3\2\2\2S\u00f2\3")
        buf.write("\2\2\2U\u0104\3\2\2\2W\u0106\3\2\2\2Y\u0108\3\2\2\2[\u010a")
        buf.write("\3\2\2\2]\u010d\3\2\2\2_\u0113\3\2\2\2a\u0115\3\2\2\2")
        buf.write("c\u011d\3\2\2\2ef\7e\2\2fg\7n\2\2gh\7c\2\2hi\7u\2\2ij")
        buf.write("\7u\2\2j\4\3\2\2\2kl\7g\2\2lm\7z\2\2mn\7v\2\2no\7g\2\2")
        buf.write("op\7p\2\2pq\7f\2\2qr\7u\2\2r\6\3\2\2\2st\7}\2\2t\b\3\2")
        buf.write("\2\2uv\7\177\2\2v\n\3\2\2\2wx\7=\2\2x\f\3\2\2\2yz\7*\2")
        buf.write("\2z\16\3\2\2\2{|\7.\2\2|\20\3\2\2\2}~\7+\2\2~\22\3\2\2")
        buf.write("\2\177\u0080\7?\2\2\u0080\24\3\2\2\2\u0081\u0082\7-\2")
        buf.write("\2\u0082\u0083\7-\2\2\u0083\26\3\2\2\2\u0084\u0085\7/")
        buf.write("\2\2\u0085\u0086\7/\2\2\u0086\30\3\2\2\2\u0087\u0088\7")
        buf.write("t\2\2\u0088\u0089\7g\2\2\u0089\u008a\7v\2\2\u008a\u008b")
        buf.write("\7w\2\2\u008b\u008c\7t\2\2\u008c\u008d\7p\2\2\u008d\32")
        buf.write("\3\2\2\2\u008e\u008f\7k\2\2\u008f\u0090\7h\2\2\u0090\34")
        buf.write("\3\2\2\2\u0091\u0092\7g\2\2\u0092\u0093\7n\2\2\u0093\u0094")
        buf.write("\7u\2\2\u0094\u0095\7g\2\2\u0095\36\3\2\2\2\u0096\u0097")
        buf.write("\7y\2\2\u0097\u0098\7j\2\2\u0098\u0099\7k\2\2\u0099\u009a")
        buf.write("\7n\2\2\u009a\u009b\7g\2\2\u009b \3\2\2\2\u009c\u009d")
        buf.write("\7h\2\2\u009d\u009e\7q\2\2\u009e\u009f\7t\2\2\u009f\"")
        buf.write("\3\2\2\2\u00a0\u00a1\7<\2\2\u00a1$\3\2\2\2\u00a2\u00a3")
        buf.write("\7]\2\2\u00a3&\3\2\2\2\u00a4\u00a5\7_\2\2\u00a5(\3\2\2")
        buf.write("\2\u00a6\u00a7\7h\2\2\u00a7\u00a8\7c\2\2\u00a8\u00a9\7")
        buf.write("n\2\2\u00a9\u00aa\7u\2\2\u00aa\u00ab\7g\2\2\u00ab*\3\2")
        buf.write("\2\2\u00ac\u00ad\7v\2\2\u00ad\u00ae\7t\2\2\u00ae\u00af")
        buf.write("\7w\2\2\u00af\u00b0\7g\2\2\u00b0,\3\2\2\2\u00b1\u00b2")
        buf.write("\7\60\2\2\u00b2.\3\2\2\2\u00b3\u00b4\7#\2\2\u00b4\60\3")
        buf.write("\2\2\2\u00b5\u00b6\7(\2\2\u00b6\u00b7\7(\2\2\u00b7\62")
        buf.write("\3\2\2\2\u00b8\u00b9\7~\2\2\u00b9\u00ba\7~\2\2\u00ba\64")
        buf.write("\3\2\2\2\u00bb\u00bc\7p\2\2\u00bc\u00bd\7w\2\2\u00bd\u00be")
        buf.write("\7n\2\2\u00be\u00bf\7n\2\2\u00bf\66\3\2\2\2\u00c0\u00c1")
        buf.write("\7p\2\2\u00c1\u00c2\7g\2\2\u00c2\u00c3\7y\2\2\u00c38\3")
        buf.write("\2\2\2\u00c4\u00c5\7,\2\2\u00c5:\3\2\2\2\u00c6\u00c7\7")
        buf.write("\61\2\2\u00c7<\3\2\2\2\u00c8\u00c9\7\'\2\2\u00c9>\3\2")
        buf.write("\2\2\u00ca\u00cb\7-\2\2\u00cb@\3\2\2\2\u00cc\u00cd\7/")
        buf.write("\2\2\u00cdB\3\2\2\2\u00ce\u00cf\7>\2\2\u00cfD\3\2\2\2")
        buf.write("\u00d0\u00d1\7>\2\2\u00d1\u00d2\7?\2\2\u00d2F\3\2\2\2")
        buf.write("\u00d3\u00d4\7@\2\2\u00d4H\3\2\2\2\u00d5\u00d6\7@\2\2")
        buf.write("\u00d6\u00d7\7?\2\2\u00d7J\3\2\2\2\u00d8\u00d9\7?\2\2")
        buf.write("\u00d9\u00da\7?\2\2\u00daL\3\2\2\2\u00db\u00dc\7#\2\2")
        buf.write("\u00dc\u00dd\7?\2\2\u00ddN\3\2\2\2\u00de\u00e0\t\2\2\2")
        buf.write("\u00df\u00de\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1\u00df\3")
        buf.write("\2\2\2\u00e1\u00e2\3\2\2\2\u00e2\u00e3\3\2\2\2\u00e3\u00e4")
        buf.write("\b(\2\2\u00e4P\3\2\2\2\u00e5\u00e9\7%\2\2\u00e6\u00e7")
        buf.write("\7\61\2\2\u00e7\u00e9\7\61\2\2\u00e8\u00e5\3\2\2\2\u00e8")
        buf.write("\u00e6\3\2\2\2\u00e9\u00ed\3\2\2\2\u00ea\u00ec\n\3\2\2")
        buf.write("\u00eb\u00ea\3\2\2\2\u00ec\u00ef\3\2\2\2\u00ed\u00eb\3")
        buf.write("\2\2\2\u00ed\u00ee\3\2\2\2\u00ee\u00f0\3\2\2\2\u00ef\u00ed")
        buf.write("\3\2\2\2\u00f0\u00f1\b)\2\2\u00f1R\3\2\2\2\u00f2\u00f3")
        buf.write("\7\61\2\2\u00f3\u00f4\7,\2\2\u00f4\u00fa\3\2\2\2\u00f5")
        buf.write("\u00f9\n\4\2\2\u00f6\u00f7\7,\2\2\u00f7\u00f9\n\5\2\2")
        buf.write("\u00f8\u00f5\3\2\2\2\u00f8\u00f6\3\2\2\2\u00f9\u00fc\3")
        buf.write("\2\2\2\u00fa\u00f8\3\2\2\2\u00fa\u00fb\3\2\2\2\u00fb\u00fd")
        buf.write("\3\2\2\2\u00fc\u00fa\3\2\2\2\u00fd\u00fe\7,\2\2\u00fe")
        buf.write("\u00ff\7\61\2\2\u00ff\u0100\3\2\2\2\u0100\u0101\b*\2\2")
        buf.write("\u0101T\3\2\2\2\u0102\u0105\5W,\2\u0103\u0105\5Y-\2\u0104")
        buf.write("\u0102\3\2\2\2\u0104\u0103\3\2\2\2\u0105V\3\2\2\2\u0106")
        buf.write("\u0107\t\6\2\2\u0107X\3\2\2\2\u0108\u0109\t\7\2\2\u0109")
        buf.write("Z\3\2\2\2\u010a\u010b\t\b\2\2\u010b\\\3\2\2\2\u010c\u010e")
        buf.write("\5[.\2\u010d\u010c\3\2\2\2\u010e\u010f\3\2\2\2\u010f\u010d")
        buf.write("\3\2\2\2\u010f\u0110\3\2\2\2\u0110^\3\2\2\2\u0111\u0114")
        buf.write("\5U+\2\u0112\u0114\7a\2\2\u0113\u0111\3\2\2\2\u0113\u0112")
        buf.write("\3\2\2\2\u0114`\3\2\2\2\u0115\u011a\5_\60\2\u0116\u0119")
        buf.write("\5_\60\2\u0117\u0119\5[.\2\u0118\u0116\3\2\2\2\u0118\u0117")
        buf.write("\3\2\2\2\u0119\u011c\3\2\2\2\u011a\u0118\3\2\2\2\u011a")
        buf.write("\u011b\3\2\2\2\u011bb\3\2\2\2\u011c\u011a\3\2\2\2\u011d")
        buf.write("\u0129\7$\2\2\u011e\u0128\n\t\2\2\u011f\u0120\7^\2\2\u0120")
        buf.write("\u0128\7$\2\2\u0121\u0122\7^\2\2\u0122\u0128\7^\2\2\u0123")
        buf.write("\u0124\7^\2\2\u0124\u0128\7p\2\2\u0125\u0126\7^\2\2\u0126")
        buf.write("\u0128\7v\2\2\u0127\u011e\3\2\2\2\u0127\u011f\3\2\2\2")
        buf.write("\u0127\u0121\3\2\2\2\u0127\u0123\3\2\2\2\u0127\u0125\3")
        buf.write("\2\2\2\u0128\u012b\3\2\2\2\u0129\u0127\3\2\2\2\u0129\u012a")
        buf.write("\3\2\2\2\u012a\u012c\3\2\2\2\u012b\u0129\3\2\2\2\u012c")
        buf.write("\u012d\7$\2\2\u012dd\3\2\2\2\17\2\u00e1\u00e8\u00ed\u00f8")
        buf.write("\u00fa\u0104\u010f\u0113\u0118\u011a\u0127\u0129\3\b\2")
        buf.write("\2")
        return buf.getvalue()


class LatteLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    MUL = 28
    DIV = 29
    MOD = 30
    ADD = 31
    SUB = 32
    LT = 33
    LE = 34
    GT = 35
    GE = 36
    EQ = 37
    NE = 38
    WS = 39
    COMMENT_SL = 40
    COMMENT_ML = 41
    INT = 42
    IDENT = 43
    STRING = 44

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class'", "'extends'", "'{'", "'}'", "';'", "'('", "','", "')'", 
            "'='", "'++'", "'--'", "'return'", "'if'", "'else'", "'while'", 
            "'for'", "':'", "'['", "']'", "'false'", "'true'", "'.'", "'!'", 
            "'&&'", "'||'", "'null'", "'new'", "'*'", "'/'", "'%'", "'+'", 
            "'-'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='" ]

    symbolicNames = [ "<INVALID>",
            "MUL", "DIV", "MOD", "ADD", "SUB", "LT", "LE", "GT", "GE", "EQ", 
            "NE", "WS", "COMMENT_SL", "COMMENT_ML", "INT", "IDENT", "STRING" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "MUL", "DIV", "MOD", "ADD", "SUB", "LT", "LE", 
                  "GT", "GE", "EQ", "NE", "WS", "COMMENT_SL", "COMMENT_ML", 
                  "Letter", "Capital", "Small", "Digit", "INT", "ID_First", 
                  "IDENT", "STRING" ]

    grammarFileName = "Latte.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None



# Generated from Latte.g4 by ANTLR 4.7
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2,")
        buf.write("\u0124\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7")
        buf.write("\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\13\3\f\3\f\3\f\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21")
        buf.write("\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\25\3\25\3\26\3\26\3\27\3\27\3\27\3\30\3\30")
        buf.write("\3\30\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\33")
        buf.write("\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3")
        buf.write("!\3!\3!\3\"\3\"\3#\3#\3#\3$\3$\3$\3%\3%\3%\3&\6&\u00d6")
        buf.write("\n&\r&\16&\u00d7\3&\3&\3\'\3\'\3\'\5\'\u00df\n\'\3\'\7")
        buf.write("\'\u00e2\n\'\f\'\16\'\u00e5\13\'\3\'\3\'\3(\3(\3(\3(\3")
        buf.write("(\3(\7(\u00ef\n(\f(\16(\u00f2\13(\3(\3(\3(\3(\3(\3)\3")
        buf.write(")\5)\u00fb\n)\3*\3*\3+\3+\3,\3,\3-\6-\u0104\n-\r-\16-")
        buf.write("\u0105\3.\3.\5.\u010a\n.\3/\3/\3/\7/\u010f\n/\f/\16/\u0112")
        buf.write("\13/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\7\60\u011e\n\60\f\60\16\60\u0121\13\60\3\60\3\60\2\2")
        buf.write("\61\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r")
        buf.write("\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30")
        buf.write("/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'")
        buf.write("M(O)Q\2S\2U\2W\2Y*[\2]+_,\3\2\n\5\2\13\f\17\17\"\"\4\2")
        buf.write("\f\f\17\17\3\2,,\3\2\61\61\3\2C\\\3\2c|\3\2\62;\4\2$$")
        buf.write("^^\2\u012d\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2")
        buf.write("\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2")
        buf.write("\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2")
        buf.write("\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#")
        buf.write("\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2")
        buf.write("\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65")
        buf.write("\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2")
        buf.write("\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2")
        buf.write("\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Y\3\2")
        buf.write("\2\2\2]\3\2\2\2\2_\3\2\2\2\3a\3\2\2\2\5g\3\2\2\2\7o\3")
        buf.write("\2\2\2\tq\3\2\2\2\13s\3\2\2\2\ru\3\2\2\2\17w\3\2\2\2\21")
        buf.write("y\3\2\2\2\23{\3\2\2\2\25}\3\2\2\2\27\u0080\3\2\2\2\31")
        buf.write("\u0083\3\2\2\2\33\u008a\3\2\2\2\35\u008d\3\2\2\2\37\u0092")
        buf.write("\3\2\2\2!\u0098\3\2\2\2#\u009a\3\2\2\2%\u009c\3\2\2\2")
        buf.write("\'\u00a2\3\2\2\2)\u00a7\3\2\2\2+\u00a9\3\2\2\2-\u00ab")
        buf.write("\3\2\2\2/\u00ae\3\2\2\2\61\u00b1\3\2\2\2\63\u00b6\3\2")
        buf.write("\2\2\65\u00ba\3\2\2\2\67\u00bc\3\2\2\29\u00be\3\2\2\2")
        buf.write(";\u00c0\3\2\2\2=\u00c2\3\2\2\2?\u00c4\3\2\2\2A\u00c6\3")
        buf.write("\2\2\2C\u00c9\3\2\2\2E\u00cb\3\2\2\2G\u00ce\3\2\2\2I\u00d1")
        buf.write("\3\2\2\2K\u00d5\3\2\2\2M\u00de\3\2\2\2O\u00e8\3\2\2\2")
        buf.write("Q\u00fa\3\2\2\2S\u00fc\3\2\2\2U\u00fe\3\2\2\2W\u0100\3")
        buf.write("\2\2\2Y\u0103\3\2\2\2[\u0109\3\2\2\2]\u010b\3\2\2\2_\u0113")
        buf.write("\3\2\2\2ab\7e\2\2bc\7n\2\2cd\7c\2\2de\7u\2\2ef\7u\2\2")
        buf.write("f\4\3\2\2\2gh\7g\2\2hi\7z\2\2ij\7v\2\2jk\7g\2\2kl\7p\2")
        buf.write("\2lm\7f\2\2mn\7u\2\2n\6\3\2\2\2op\7}\2\2p\b\3\2\2\2qr")
        buf.write("\7\177\2\2r\n\3\2\2\2st\7=\2\2t\f\3\2\2\2uv\7*\2\2v\16")
        buf.write("\3\2\2\2wx\7.\2\2x\20\3\2\2\2yz\7+\2\2z\22\3\2\2\2{|\7")
        buf.write("?\2\2|\24\3\2\2\2}~\7-\2\2~\177\7-\2\2\177\26\3\2\2\2")
        buf.write("\u0080\u0081\7/\2\2\u0081\u0082\7/\2\2\u0082\30\3\2\2")
        buf.write("\2\u0083\u0084\7t\2\2\u0084\u0085\7g\2\2\u0085\u0086\7")
        buf.write("v\2\2\u0086\u0087\7w\2\2\u0087\u0088\7t\2\2\u0088\u0089")
        buf.write("\7p\2\2\u0089\32\3\2\2\2\u008a\u008b\7k\2\2\u008b\u008c")
        buf.write("\7h\2\2\u008c\34\3\2\2\2\u008d\u008e\7g\2\2\u008e\u008f")
        buf.write("\7n\2\2\u008f\u0090\7u\2\2\u0090\u0091\7g\2\2\u0091\36")
        buf.write("\3\2\2\2\u0092\u0093\7y\2\2\u0093\u0094\7j\2\2\u0094\u0095")
        buf.write("\7k\2\2\u0095\u0096\7n\2\2\u0096\u0097\7g\2\2\u0097 \3")
        buf.write("\2\2\2\u0098\u0099\7]\2\2\u0099\"\3\2\2\2\u009a\u009b")
        buf.write("\7_\2\2\u009b$\3\2\2\2\u009c\u009d\7h\2\2\u009d\u009e")
        buf.write("\7c\2\2\u009e\u009f\7n\2\2\u009f\u00a0\7u\2\2\u00a0\u00a1")
        buf.write("\7g\2\2\u00a1&\3\2\2\2\u00a2\u00a3\7v\2\2\u00a3\u00a4")
        buf.write("\7t\2\2\u00a4\u00a5\7w\2\2\u00a5\u00a6\7g\2\2\u00a6(\3")
        buf.write("\2\2\2\u00a7\u00a8\7\60\2\2\u00a8*\3\2\2\2\u00a9\u00aa")
        buf.write("\7#\2\2\u00aa,\3\2\2\2\u00ab\u00ac\7(\2\2\u00ac\u00ad")
        buf.write("\7(\2\2\u00ad.\3\2\2\2\u00ae\u00af\7~\2\2\u00af\u00b0")
        buf.write("\7~\2\2\u00b0\60\3\2\2\2\u00b1\u00b2\7p\2\2\u00b2\u00b3")
        buf.write("\7w\2\2\u00b3\u00b4\7n\2\2\u00b4\u00b5\7n\2\2\u00b5\62")
        buf.write("\3\2\2\2\u00b6\u00b7\7p\2\2\u00b7\u00b8\7g\2\2\u00b8\u00b9")
        buf.write("\7y\2\2\u00b9\64\3\2\2\2\u00ba\u00bb\7,\2\2\u00bb\66\3")
        buf.write("\2\2\2\u00bc\u00bd\7\61\2\2\u00bd8\3\2\2\2\u00be\u00bf")
        buf.write("\7\'\2\2\u00bf:\3\2\2\2\u00c0\u00c1\7-\2\2\u00c1<\3\2")
        buf.write("\2\2\u00c2\u00c3\7/\2\2\u00c3>\3\2\2\2\u00c4\u00c5\7>")
        buf.write("\2\2\u00c5@\3\2\2\2\u00c6\u00c7\7>\2\2\u00c7\u00c8\7?")
        buf.write("\2\2\u00c8B\3\2\2\2\u00c9\u00ca\7@\2\2\u00caD\3\2\2\2")
        buf.write("\u00cb\u00cc\7@\2\2\u00cc\u00cd\7?\2\2\u00cdF\3\2\2\2")
        buf.write("\u00ce\u00cf\7?\2\2\u00cf\u00d0\7?\2\2\u00d0H\3\2\2\2")
        buf.write("\u00d1\u00d2\7#\2\2\u00d2\u00d3\7?\2\2\u00d3J\3\2\2\2")
        buf.write("\u00d4\u00d6\t\2\2\2\u00d5\u00d4\3\2\2\2\u00d6\u00d7\3")
        buf.write("\2\2\2\u00d7\u00d5\3\2\2\2\u00d7\u00d8\3\2\2\2\u00d8\u00d9")
        buf.write("\3\2\2\2\u00d9\u00da\b&\2\2\u00daL\3\2\2\2\u00db\u00df")
        buf.write("\7%\2\2\u00dc\u00dd\7\61\2\2\u00dd\u00df\7\61\2\2\u00de")
        buf.write("\u00db\3\2\2\2\u00de\u00dc\3\2\2\2\u00df\u00e3\3\2\2\2")
        buf.write("\u00e0\u00e2\n\3\2\2\u00e1\u00e0\3\2\2\2\u00e2\u00e5\3")
        buf.write("\2\2\2\u00e3\u00e1\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4\u00e6")
        buf.write("\3\2\2\2\u00e5\u00e3\3\2\2\2\u00e6\u00e7\b\'\2\2\u00e7")
        buf.write("N\3\2\2\2\u00e8\u00e9\7\61\2\2\u00e9\u00ea\7,\2\2\u00ea")
        buf.write("\u00f0\3\2\2\2\u00eb\u00ef\n\4\2\2\u00ec\u00ed\7,\2\2")
        buf.write("\u00ed\u00ef\n\5\2\2\u00ee\u00eb\3\2\2\2\u00ee\u00ec\3")
        buf.write("\2\2\2\u00ef\u00f2\3\2\2\2\u00f0\u00ee\3\2\2\2\u00f0\u00f1")
        buf.write("\3\2\2\2\u00f1\u00f3\3\2\2\2\u00f2\u00f0\3\2\2\2\u00f3")
        buf.write("\u00f4\7,\2\2\u00f4\u00f5\7\61\2\2\u00f5\u00f6\3\2\2\2")
        buf.write("\u00f6\u00f7\b(\2\2\u00f7P\3\2\2\2\u00f8\u00fb\5S*\2\u00f9")
        buf.write("\u00fb\5U+\2\u00fa\u00f8\3\2\2\2\u00fa\u00f9\3\2\2\2\u00fb")
        buf.write("R\3\2\2\2\u00fc\u00fd\t\6\2\2\u00fdT\3\2\2\2\u00fe\u00ff")
        buf.write("\t\7\2\2\u00ffV\3\2\2\2\u0100\u0101\t\b\2\2\u0101X\3\2")
        buf.write("\2\2\u0102\u0104\5W,\2\u0103\u0102\3\2\2\2\u0104\u0105")
        buf.write("\3\2\2\2\u0105\u0103\3\2\2\2\u0105\u0106\3\2\2\2\u0106")
        buf.write("Z\3\2\2\2\u0107\u010a\5Q)\2\u0108\u010a\7a\2\2\u0109\u0107")
        buf.write("\3\2\2\2\u0109\u0108\3\2\2\2\u010a\\\3\2\2\2\u010b\u0110")
        buf.write("\5[.\2\u010c\u010f\5[.\2\u010d\u010f\5W,\2\u010e\u010c")
        buf.write("\3\2\2\2\u010e\u010d\3\2\2\2\u010f\u0112\3\2\2\2\u0110")
        buf.write("\u010e\3\2\2\2\u0110\u0111\3\2\2\2\u0111^\3\2\2\2\u0112")
        buf.write("\u0110\3\2\2\2\u0113\u011f\7$\2\2\u0114\u011e\n\t\2\2")
        buf.write("\u0115\u0116\7^\2\2\u0116\u011e\7$\2\2\u0117\u0118\7^")
        buf.write("\2\2\u0118\u011e\7^\2\2\u0119\u011a\7^\2\2\u011a\u011e")
        buf.write("\7p\2\2\u011b\u011c\7^\2\2\u011c\u011e\7v\2\2\u011d\u0114")
        buf.write("\3\2\2\2\u011d\u0115\3\2\2\2\u011d\u0117\3\2\2\2\u011d")
        buf.write("\u0119\3\2\2\2\u011d\u011b\3\2\2\2\u011e\u0121\3\2\2\2")
        buf.write("\u011f\u011d\3\2\2\2\u011f\u0120\3\2\2\2\u0120\u0122\3")
        buf.write("\2\2\2\u0121\u011f\3\2\2\2\u0122\u0123\7$\2\2\u0123`\3")
        buf.write("\2\2\2\17\2\u00d7\u00de\u00e3\u00ee\u00f0\u00fa\u0105")
        buf.write("\u0109\u010e\u0110\u011d\u011f\3\b\2\2")
        return buf.getvalue()


class LatteLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    MUL = 26
    DIV = 27
    MOD = 28
    ADD = 29
    SUB = 30
    LT = 31
    LE = 32
    GT = 33
    GE = 34
    EQ = 35
    NE = 36
    WS = 37
    COMMENT_SL = 38
    COMMENT_ML = 39
    INT = 40
    IDENT = 41
    STRING = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'class'", "'extends'", "'{'", "'}'", "';'", "'('", "','", "')'", 
            "'='", "'++'", "'--'", "'return'", "'if'", "'else'", "'while'", 
            "'['", "']'", "'false'", "'true'", "'.'", "'!'", "'&&'", "'||'", 
            "'null'", "'new'", "'*'", "'/'", "'%'", "'+'", "'-'", "'<'", 
            "'<='", "'>'", "'>='", "'=='", "'!='" ]

    symbolicNames = [ "<INVALID>",
            "MUL", "DIV", "MOD", "ADD", "SUB", "LT", "LE", "GT", "GE", "EQ", 
            "NE", "WS", "COMMENT_SL", "COMMENT_ML", "INT", "IDENT", "STRING" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "MUL", "DIV", 
                  "MOD", "ADD", "SUB", "LT", "LE", "GT", "GE", "EQ", "NE", 
                  "WS", "COMMENT_SL", "COMMENT_ML", "Letter", "Capital", 
                  "Small", "Digit", "INT", "ID_First", "IDENT", "STRING" ]

    grammarFileName = "Latte.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


